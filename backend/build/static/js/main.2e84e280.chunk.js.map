{"version":3,"sources":["utils/tokenService.js","utils/authService.js","App/AuthPage/AuthPage.jsx","App/App.jsx","serviceWorker.js","index.js"],"names":["getToken","token","localStorage","getItem","JSON","parse","atob","split","exp","Date","now","removeItem","setToken","setItem","removeToken","getUserFromToken","user","signup","userInfo","cb","fetch","method","headers","body","stringify","then","res","json","tokenService","error","catch","console","log","getUser","logout","login","FormInput","label","value","type","handleChange","className","onChange","Form","children","title","AuthPage","useState","username","setUsername","password","setPassword","getHandleChange","setter","e","target","PrivateRoute","rest","render","props","component","to","App","authService","undefined","exact","path","match","params","groupName","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2e84e280.chunk.js","sourcesContent":["function setToken(token) {\r\n  if(token) localStorage.setItem('token', token);\r\n  else localStorage.removeItem('token');\r\n}\r\n\r\nfunction getToken() {\r\n  let token = localStorage.getItem('token');\r\n  if(token) {\r\n    const payload = JSON.parse(atob(token.split('.')[1]));\r\n    if (payload.exp < Date.now() / 1000) {\r\n      localStorage.removeItem('token');\r\n      token = null;\r\n    }\r\n  }\r\n  return token;\r\n}\r\n\r\nfunction getUserFromToken() {\r\n  const token = getToken();\r\n  return !!token ? JSON.parse(atob(token.split('.')[1])).user : null;\r\n}\r\n\r\nfunction removeToken() {\r\n  localStorage.removeItem('token');\r\n}\r\n\r\nexport default {\r\n  setToken,\r\n  getToken,\r\n  removeToken,\r\n  getUserFromToken\r\n};\r\n","import tokenService from './tokenService';\r\n\r\nfunction getUser() {\r\n  return tokenService.getUserFromToken();\r\n}\r\n\r\nfunction logout() {\r\n  tokenService.removeToken();\r\n}\r\n\r\nfunction login(userInfo, cb) {\r\n  return fetch('/api/auth/login', {\r\n\t\tmethod: 'POST',\r\n\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\tbody: JSON.stringify({ userInfo })\r\n\t})\r\n\t\t.then(res => res.json())\r\n\t\t.then(body => {\r\n\t\t\tif(body.token) tokenService.setToken(body.token)\r\n\t\t\telse var error = true;\r\n\t\t\tcb(error);\r\n\t\t})\r\n\t\t.catch(console.log);\r\n}\r\n\r\nfunction signup(userInfo, cb) {\r\n\tfetch('/api/auth/signup', {\r\n\t\tmethod: 'POST',\r\n\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\tbody: JSON.stringify({ userInfo })\r\n\t})\r\n\t\t.then(res => res.json())\r\n\t\t.then(body => {\r\n\t\t\tif(body.token) tokenService.setToken(body.token);\r\n\t\t\tcb(body.error);\r\n\t\t})\r\n\t\t.catch(console.log);\t\r\n}\r\n\r\nexport default {\r\n  signup, \r\n  getUser,\r\n  logout,\r\n  login\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nconst FormInput = ({ label, value, type, handleChange }) => (\r\n  <div className='row'>\r\n    <div className='col-10 col-sm-8 mx-auto'>\r\n      <label className='d-block'>{label}</label>\r\n      <input className='w-100' type={type} value={value} onChange={handleChange} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst Form = ({ children, title }) => (\r\n  <form className='m-4 p-3'>\r\n    <h4 className='col-12 pb-2 text-center'>{title}</h4>\r\n    {children}\r\n  </form>\r\n);\r\n\r\nfunction AuthPage() {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const getHandleChange = (setter) => (e) => setter(e.target.value);\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div className='row'>\r\n        <div className='col-10 col-md-8 mx-auto m-4 border'>\r\n          <Form title='Sign Up'>\r\n            <FormInput\r\n              label='Username'\r\n              value={username}\r\n              type='text'\r\n              handleChange={getHandleChange(setUsername)}\r\n            />\r\n            \r\n            <FormInput\r\n              label='Password'\r\n              value={password}\r\n              type='password'\r\n              handleChange={getHandleChange(setPassword)}\r\n            />\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AuthPage;","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport authService from '../utils/authService';\n\nimport AuthPage from './AuthPage/AuthPage';\n\nconst PrivateRoute = ({ cb, ...rest }) => (\n  <Route {...rest}\n    render={props => {\n      let component = cb(props);\n      if(!!component.props.user) return component;\n      else return <Redirect to=\"/signup\" />;\n    }}\n  />\n);\n\nfunction App() {\n  const [user, setUser] = useState(authService.getUser() || undefined);\n\n  const handleLogin = () => {\n    let user = authService.getUser() || undefined;\n    this.setUser(user);\n  };\n\n  const handleLogout = () => {\n    authService.logout()\n    this.setUser(user);\n  };\n\n  return (\n    <div className=\"App\">\n      \n      <Router>\n        <Switch>\n          <Route exact path=\"/\" render={props => <div>Landing Page</div>} />\n          <Route path=\"/login\" render={props => <AuthPage />} />\n          <Route path=\"/signup\" render={props => <AuthPage />} />\n          <Route path=\"/onboarding\" render={props => <div>Onboarding Page</div>} />\n          <PrivateRoute\n            exact\n            path=\"/swipe\"\n            user={user}\n            cb={props => <div>Swipe Page</div>}\n          />\n          <PrivateRoute\n            path=\"/profile/:username\"\n            user={user}\n            render={props => <div>Profile Page: {props.match.params.username}</div>}\n          />\n          <PrivateRoute\n            path=\"/matches\"\n            user={user}\n            render={props => <div>Matches Page</div>}\n          />\n          <PrivateRoute\n            path=\"/group/:groupName\"\n            user={user}\n            render={props => <div>Matches Page: {props.match.params.groupName}</div>}\n          />\n        </Switch>\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}